<?xml version="1.0" encoding="utf-8"?>
<Types>
  <Type>
    <Name>RES.AutomationManager.Agent</Name>
    <Members>
      <MemberSet>
        <Name>PsStandardMembers</Name>
        <Members>
          <NoteProperty>
            <Name>DefaultDisplayProperty</Name>
            <Value>Name</Value>
          </NoteProperty>
          <PropertySet>
            <Name>DefaultDisplayPropertySet</Name>
            <ReferencedProperties>
              <Name>Name</Name>
              <Name>State</Name>
              <Name>OSName</Name>
              <Name>OSServicePack</Name>
              <Name>PrimaryTeam</Name>
              <Name>Teams</Name>
            </ReferencedProperties>
          </PropertySet>
          <PropertySet>
            <Name>DefaultKeyPropertySet</Name>
            <ReferencedProperties>
              <Name>Name</Name>
            </ReferencedProperties>
          </PropertySet>
        </Members>
      </MemberSet>
	  <ScriptProperty>
		<Name>MACAddress</Name>
		<GetScriptBlock>
			If ($this.Info.LAN.Adapter.MAC)
			{
				$this.Info.LAN.Adapter.MAC
			}
			else
			{
				"Use '-Full' parameter for details"
			}
		</GetScriptBlock>
	  </ScriptProperty>
	  <ScriptProperty>
		<Name>IPAddress</Name>
		<GetScriptBlock>
			If ($this.Info.LAN.Adapter.IP)
			{
				$this.Info.LAN.Adapter.IP
			}
			else
			{
				"Use '-Full' parameter for details"
			}
		</GetScriptBlock>
	  </ScriptProperty>
	  <ScriptMethod>
		<Name>GetFullDetails</Name>
		<Script>$this | Get-RESAMAgent -Full</Script>
	  </ScriptMethod>
	  <ScriptMethod>
		<Name>GetJobHistory</Name>
		<Script>
			Param([int]$Last)
			
			If ($PSBoundParameters.ContainsKey('Last'))
			{
				$Properties = @{Last = $Last}
			}
			$this | Get-RESAMJob @Properties
		</Script>
	  </ScriptMethod>
	  <ScriptMethod>
		<Name>ToString</Name>
		<Script>$this.Name</Script>
	  </ScriptMethod>
	  <AliasProperty>
		<Name>AgentName</Name>
		<ReferencedMemberName>
			Name
		</ReferencedMemberName>
	  </AliasProperty>
    </Members>
  </Type>
  <Type>
    <Name>RES.AutomationManager.Team</Name>
    <Members>
      <MemberSet>
        <Name>PsStandardMembers</Name>
        <Members>
          <NoteProperty>
            <Name>DefaultDisplayProperty</Name>
            <Value>Name</Value>
          </NoteProperty>
          <PropertySet>
            <Name>DefaultDisplayPropertySet</Name>
            <ReferencedProperties>
              <Name>Name</Name>
              <Name>GUID</Name>
			  <Name>Enabled</Name>
              <Name>Description</Name>
            </ReferencedProperties>
          </PropertySet>
          <PropertySet>
            <Name>DefaultKeyPropertySet</Name>
            <ReferencedProperties>
              <Name>Name</Name>
            </ReferencedProperties>
          </PropertySet>
        </Members>
      </MemberSet>
	  <ScriptProperty>
		<Name>TeamGUID</Name>
		<GetScriptBlock>$this.GUID</GetScriptBlock>
	  </ScriptProperty>
	  <ScriptProperty>
		<Name>Rules</Name>
		<GetScriptBlock>
			If ($this.Properties.team)
			{
				$this.Properties.team.rules
			}
			else
			{
				"Use '-Full' parameter for details"
			}
		</GetScriptBlock>
	  </ScriptProperty>
	  <ScriptMethod>
		<Name>GetFullDetails</Name>
		<Script>$this | Get-RESAMTeam -Full</Script>
	  </ScriptMethod>
	  <ScriptMethod>
		<Name>ToString</Name>
		<Script>$this.Name</Script>
	  </ScriptMethod>
	  <AliasProperty>
		<Name>TeamName</Name>
		<ReferencedMemberName>
			Name
		</ReferencedMemberName>
	  </AliasProperty>
    </Members>
  </Type>
  <Type>
    <Name>RES.AutomationManager.Module</Name>
    <Members>
      <MemberSet>
        <Name>PsStandardMembers</Name>
        <Members>
          <NoteProperty>
            <Name>DefaultDisplayProperty</Name>
            <Value>Module</Value>
          </NoteProperty>
          <PropertySet>
            <Name>DefaultDisplayPropertySet</Name>
            <ReferencedProperties>
              <Name>Name</Name>
			  <Name>Enabled</Name>
			  <Name>RequiredParameters</Name>
              <Name>FolderName</Name>
			  <Name>ModuleTasks</Name>
            </ReferencedProperties>
          </PropertySet>
          <PropertySet>
            <Name>DefaultKeyPropertySet</Name>
            <ReferencedProperties>
              <Name>Name</Name>
            </ReferencedProperties>
          </PropertySet>
        </Members>
      </MemberSet>
	  <ScriptProperty>
		<Name>Parameters</Name>
		<GetScriptBlock>
			If ($this.Tasks.tasks.task)
			{
				$this.Tasks.tasks.task.parameters.param | %{
					switch ($_.Type)
					{
						0 {$Type = 'Text'}
						1 {$Type = 'List'}
						2 {$Type = 'Credentials'}
						3 {$Type = 'Multi-Select List'}
						4 {$Type = 'Multi-Line Text'}
						5 {$Type = 'Password'}
					}
					$ListItems = @()
					$Items = $_.value2.Split(';')
					$Descr = $_.value3.Split(';')
                    If ($Items)
                    {
					    for ($i = 0; $i -lt $Items.Count; $i++)
					    {
                            $Item = [pscustomobject]@{
                                Value = $Items[$i]
                                Description = $Descr[$i]
                            }
						    $ListItems += $Item
					    }
                    }
					$Object = [pscustomobject]@{
						Name = $_.name
						Description = $_.description
						Hint = $_.hint
						Type = $Type
						Default = $_.value1
						ListItems = $ListItems
					}
					$Object.PSObject.TypeNames.Insert(0,"RES.AutomationManager.Parameter")
					$Object
				}
			}
			else
			{
				"Use '-Full' parameter for details"
			}
		</GetScriptBlock>
	  </ScriptProperty>
	  <ScriptProperty>
		<Name>RequiredParameters</Name>
		<GetScriptBlock>
			If ($this.Tasks.tasks.task)
			{
				$Required = $this.Tasks.tasks.task.parameters.param | ?{
					$_.inputtiming.schedulejob.'#text' -eq 'Yes'
				}
				$Required | %{
					switch ($_.Type)
					{
						0 {$Type = 'Text'}
						1 {$Type = 'List'}
						2 {$Type = 'Credentials'}
						3 {$Type = 'Multi-Select List'}
						4 {$Type = 'Multi-Line Text'}
						5 {$Type = 'Password'}
					}
					$ListItems = @()
					$Items = $_.value2.Split(';')
					$Descr = $_.value3.Split(';')
                    If ($Items)
                    {
					    for ($i = 0; $i -lt $Items.Count; $i++)
					    {
                            $Item = [pscustomobject]@{
                                Value = $Items[$i]
                                Description = $Descr[$i]
                            }
						    $ListItems += $Item
					    }
                    }
					$Object = [pscustomobject]@{
						Name = $_.name
						Description = $_.description
						Hint = $_.hint
						Type = $Type
						Default = $_.value1
						ListItems = $ListItems
					}
					$Object.PSObject.TypeNames.Insert(0,"RES.AutomationManager.Parameter")
					$Object
				}
			}
			else
			{
				"Use '-Full' parameter for details"
			}
		</GetScriptBlock>
	  </ScriptProperty>
	  <ScriptProperty>
		<Name>ModuleGUID</Name>
		<GetScriptBlock>$this.GUID</GetScriptBlock>
	  </ScriptProperty>
	  <ScriptMethod>
		<Name>GetFullDetails</Name>
		<Script>$this | Get-RESAMModule -Full</Script>
	  </ScriptMethod>
	  <ScriptMethod>
		<Name>GetJobHistory</Name>
		<Script>
			Param([int]$Last)
			
			If ($PSBoundParameters.ContainsKey('Last'))
			{
				$Properties = @{Last = $Last}
			}
			$this | Get-RESAMMasterJob @Properties
		</Script>
	  </ScriptMethod>
	  <ScriptMethod>
		<Name>ToString</Name>
		<Script>$this.Name</Script>
	  </ScriptMethod>
    </Members>
  </Type>
  <Type>
    <Name>RES.AutomationManager.Project</Name>
    <Members>
      <MemberSet>
        <Name>PsStandardMembers</Name>
        <Members>
          <NoteProperty>
            <Name>DefaultDisplayProperty</Name>
            <Value>Project</Value>
          </NoteProperty>
          <PropertySet>
            <Name>DefaultDisplayPropertySet</Name>
            <ReferencedProperties>
              <Name>Name</Name>
              <Name>GUID</Name>
			  <Name>Enabled</Name>
			  <Name>RequiredParameters</Name>
              <Name>FolderName</Name>
            </ReferencedProperties>
          </PropertySet>
          <PropertySet>
            <Name>DefaultKeyPropertySet</Name>
            <ReferencedProperties>
              <Name>Name</Name>
            </ReferencedProperties>
          </PropertySet>
        </Members>
      </MemberSet>
	  <ScriptProperty>
		<Name>Parameters</Name>
		<GetScriptBlock>
			If ($this.Properties.properties)
			{
				$this.Properties.properties.parameters.param | %{
					switch ($_.Type)
					{
						0 {$Type = 'Text'}
						1 {$Type = 'List'}
						2 {$Type = 'Credentials'}
						3 {$Type = 'Multi-Select List'}
						4 {$Type = 'Multi-Line Text'}
						5 {$Type = 'Password'}
					}
					$ListItems = @()
					$Items = $_.value2.Split(';')
					$Descr = $_.value3.Split(';')
                    If ($Items)
                    {
					    for ($i = 0; $i -lt $Items.Count; $i++)
					    {
                            $Item = [pscustomobject]@{
                                Value = $Items[$i]
                                Description = $Descr[$i]
                            }
						    $ListItems += $Item
					    }
                    }
					$Object = [pscustomobject]@{
						Name = $_.name
						Description = $_.description
						Hint = $_.hint
						Type = $Type
						Default = $_.value1
						ListItems = $ListItems
					}
					$Object.PSObject.TypeNames.Insert(0,"RES.AutomationManager.Parameter")
					$Object
				}
			}
			else
			{
				"Use '-Full' parameter for details"
			}
		</GetScriptBlock>
	  </ScriptProperty>
	  <ScriptProperty>
		<Name>RequiredParameters</Name>
		<GetScriptBlock>
			If ($this.Properties.properties)
			{
				$Required = $this.Properties.properties.parameters.param | ?{$_.inputtiming.schedulejob.'#text' -eq 'Yes'}
				$Required | %{
					switch ($_.Type)
					{
						0 {$Type = 'Text'}
						1 {$Type = 'List'}
						2 {$Type = 'Credentials'}
						3 {$Type = 'Multi-Select List'}
						4 {$Type = 'Multi-Line Text'}
						5 {$Type = 'Password'}
					}
					$ListItems = @()
					$Items = $_.value2.Split(';')
					$Descr = $_.value3.Split(';')
                    If ($Items)
                    {
					    for ($i = 0; $i -lt $Items.Count; $i++)
					    {
                            $Item = [pscustomobject]@{
                                Value = $Items[$i]
                                Description = $Descr[$i]
                            }
						    $ListItems += $Item
					    }
                    }
					$Object = [pscustomobject]@{
						Name = $_.name
						Description = $_.description
						Hint = $_.hint
						Type = $Type
						Default = $_.value1
						ListItems = $ListItems
					}
					$Object.PSObject.TypeNames.Insert(0,"RES.AutomationManager.Parameter")
					$Object
				}
			}
			else
			{
				"Use '-Full' parameter for details"
			}
		</GetScriptBlock>
	  </ScriptProperty>
	  <ScriptProperty>
		<Name>ProjectGUID</Name>
		<GetScriptBlock>$this.GUID</GetScriptBlock>
	  </ScriptProperty>
	  <ScriptMethod>
		<Name>GetFullDetails</Name>
		<Script>$this | Get-RESAMProject -Full</Script>
	  </ScriptMethod>
	  <ScriptMethod>
		<Name>GetJobHistory</Name>
		<Script>
			Param([int]$Last)
			
			If ($PSBoundParameters.ContainsKey('Last'))
			{
				$Properties = @{Last = $Last}
			}
			$this | Get-RESAMMasterJob @Properties
		</Script>
	  </ScriptMethod>
	  <ScriptMethod>
		<Name>ToString</Name>
		<Script>$this.Name</Script>
	  </ScriptMethod>
    </Members>
  </Type>
  <Type>
    <Name>RES.AutomationManager.RunBook</Name>
    <Members>
      <MemberSet>
        <Name>PsStandardMembers</Name>
        <Members>
          <NoteProperty>
            <Name>DefaultDisplayProperty</Name>
            <Value>RunBook</Value>
          </NoteProperty>
          <PropertySet>
            <Name>DefaultDisplayPropertySet</Name>
            <ReferencedProperties>
              <Name>Name</Name>
              <Name>GUID</Name>
			  <Name>Enabled</Name>
			  <Name>RequiredParameters</Name>
			  <Name>RunBookJobs</Name>
              <Name>FolderName</Name>
            </ReferencedProperties>
          </PropertySet>
          <PropertySet>
            <Name>DefaultKeyPropertySet</Name>
            <ReferencedProperties>
              <Name>Name</Name>
            </ReferencedProperties>
          </PropertySet>
        </Members>
      </MemberSet>
	  <ScriptProperty>
		<Name>Parameters</Name>
		<GetScriptBlock>
			If ($this.Properties.properties)
			{
				$this.Properties.properties.parameters.param | %{
					switch ($_.Type)
					{
						0 {$Type = 'Text'}
						1 {$Type = 'List'}
						2 {$Type = 'Credentials'}
						3 {$Type = 'Multi-Select List'}
						4 {$Type = 'Multi-Line Text'}
						5 {$Type = 'Password'}
					}
					$ListItems = @()
					$Items = $_.value2.Split(';')
					$Descr = $_.value3.Split(';')
                    If ($Items)
                    {
					    for ($i = 0; $i -lt $Items.Count; $i++)
					    {
                            $Item = [pscustomobject]@{
                                Value = $Items[$i]
                                Description = $Descr[$i]
                            }
						    $ListItems += $Item
					    }
                    }
					$Object = [pscustomobject]@{
						Name = $_.name
						Description = $_.description
						Hint = $_.hint
						Type = $Type
						Default = $_.value1
						ListItems = $ListItems
					}
					$Object.PSObject.TypeNames.Insert(0,"RES.AutomationManager.Parameter")
					$Object
				}
			}
			else
			{
				"Use '-Full' parameter for details"
			}
		</GetScriptBlock>
	  </ScriptProperty>
	  <ScriptProperty>
		<Name>RequiredParameters</Name>
		<GetScriptBlock>
			If ($this.Properties.properties)
			{
				$Required = $this.Properties.properties.parameters.param | ?{
					$_.inputtiming.schedulejob.'#text' -eq 'Yes'
				}
				$Required | %{
					switch ($_.Type)
					{
						0 {$Type = 'Text'}
						1 {$Type = 'List'}
						2 {$Type = 'Credentials'}
						3 {$Type = 'Multi-Select List'}
						4 {$Type = 'Multi-Line Text'}
						5 {$Type = 'Password'}
					}
					$ListItems = @()
					$Items = $_.value2.Split(';')
					$Descr = $_.value3.Split(';')
                    If ($Items)
                    {
					    for ($i = 0; $i -lt $Items.Count; $i++)
					    {
                            $Item = [pscustomobject]@{
                                Value = $Items[$i]
                                Description = $Descr[$i]
                            }
						    $ListItems += $Item
					    }
                    }
					$Object = [pscustomobject]@{
						Name = $_.name
						Description = $_.description
						Hint = $_.hint
						Type = $Type
						Default = $_.value1
						ListItems = $ListItems
					}
					$Object.PSObject.TypeNames.Insert(0,"RES.AutomationManager.Parameter")
					$Object
				}
			}
			else
			{
				"Use '-Full' parameter for details"
			}
		</GetScriptBlock>
	  </ScriptProperty>
	  <ScriptProperty>
		<Name>RunBookJobs</Name>
		<GetScriptBlock>
			If ($this.Properties.properties)
			{
				$Jobs = $this.Properties.properties.jobs.job
				foreach ($Job in $Jobs)
				{
					$Properties = $Job.properties
					$Type = $Properties.what.type
					$GUIDS = $Properties.what.InnerText.Split(';').Trim('{|}')
					$What = foreach ($GUID in $GUIDS)
					{
						$Command = "Get-RESAM$Type -GUID $GUID"
						Invoke-Expression $Command
					}
					If ($Properties.who.type -eq 'Agent')
					{
						$Who = Get-RESAMAgent -GUID $Properties.who.InnerText
					}
					elseif ($Properties.use_runbookparam -eq 'yes')
					{
						switch ($Properties.runbookparam_behavior)
						{
							0 {$Select = 'Agent by ComputerName'}
							1 {$Select = 'Agent by active console user'}
							2 {$Select = 'Agent by last console user'}
							3 {$Select = 'Most recent Agent by last console user'}
						}
						$Who = [pscustomobject]@{
							Parameter = $Properties.runbookparam_who
							SelectionMethod = $Select
						}
						$Params = @{
							MemberType = 'ScriptMethod'
							Name = 'ToString'
							Value = {$this.Parameter}
						}
						$Who | Add-Member @Params -Force
					}
					else
					{
						$Who = $Properties.who.InnerText
					}
					$Object = [pscustomobject]@{
						Description = $Properties.name
						Enabled = $Properties.enabled
						What = $What
						Who = $Who
						OnError = $Properties.onerror
						'TimeOut(m)' = $Properties.timeout
						JobGUID = $Job.guid
					}
					If ($Who.count -gt 1)
					{
						$Params = @{
							MemberType = 'NoteProperty'
							Name = 'SelectOneAgent'
							Value = $Properties.selectoneagent
						}
						$Object | Add-Member @Params
					}
					If ($Properties.offlineagentsnextboot -eq 'yes')
					{
						switch ($Properties.resume)
						{
							yes {$Value = 'NextBoot;Resume'}
							no  {$Value = 'NextBoot'}
						}
						$Params = @{
							MemberType = 'NoteProperty'
							Name = 'OfflineAgents'
							Value = $Value
						}
						$Object | Add-Member @Params
					}
					else
					{
						$Params = @{
							MemberType = 'NoteProperty'
							Name = 'WakeOnLAN'
							Value = $Properties.wol
						}
						$Object | Add-Member @Params
					}
					$Object | ConvertTo-RESAMObject -Type RunbookJob
				}
			}
			else
			{
				"Use '-Full' parameter for details"
			}
		</GetScriptBlock>
	  </ScriptProperty>
	  <ScriptProperty>
		<Name>RunBookGUID</Name>
		<GetScriptBlock>$this.GUID</GetScriptBlock>
	  </ScriptProperty>
	  <ScriptMethod>
		<Name>GetFullDetails</Name>
		<Script>$this | Get-RESAMRunbook -Full</Script>
	  </ScriptMethod>
	  <ScriptMethod>
		<Name>GetJobHistory</Name>
		<Script>
			Param([int]$Last)
			
			If ($PSBoundParameters.ContainsKey('Last'))
			{
				$Properties = @{Last = $Last}
			}
			$this | Get-RESAMMasterJob @Properties
		</Script>
	  </ScriptMethod>
	  <ScriptMethod>
		<Name>ToString</Name>
		<Script>$this.Name</Script>
	  </ScriptMethod>
    </Members>
  </Type>
  <Type>
    <Name>RES.AutomationManager.Dispatcher</Name>
    <Members>
      <MemberSet>
        <Name>PsStandardMembers</Name>
        <Members>
          <NoteProperty>
            <Name>DefaultDisplayProperty</Name>
            <Value>Name</Value>
          </NoteProperty>
          <PropertySet>
            <Name>DefaultDisplayPropertySet</Name>
            <ReferencedProperties>
              <Name>Name</Name>
              <Name>Version</Name>
			  <Name>OSName</Name>
              <Name>Status</Name>
            </ReferencedProperties>
          </PropertySet>
          <PropertySet>
            <Name>DefaultKeyPropertySet</Name>
            <ReferencedProperties>
              <Name>Name</Name>
            </ReferencedProperties>
          </PropertySet>
        </Members>
      </MemberSet>
	  <ScriptMethod>
		<Name>GetFullDetails</Name>
		<Script>$this | Get-RESAMDispatcher -Full</Script>
	  </ScriptMethod>
	  <ScriptMethod>
		<Name>ToString</Name>
		<Script>$this.Name</Script>
	  </ScriptMethod>
    </Members>
  </Type>
  <Type>
    <Name>RES.AutomationManager.QueryResult</Name>
    <Members>
      <MemberSet>
        <Name>PsStandardMembers</Name>
        <Members>
          <NoteProperty>
            <Name>DefaultDisplayProperty</Name>
            <Value>QueryResult</Value>
          </NoteProperty>
          <PropertySet>
            <Name>DefaultDisplayPropertySet</Name>
            <ReferencedProperties>
              <Name>Agent</Name>
              <Name>QueryObject</Name>
			  <Name>Result</Name>
			  <Name>DateTime</Name>
              <Name>Order</Name>
            </ReferencedProperties>
          </PropertySet>
          <PropertySet>
            <Name>DefaultKeyPropertySet</Name>
            <ReferencedProperties>
              <Name>QueryResult</Name>
            </ReferencedProperties>
          </PropertySet>
        </Members>
      </MemberSet>
	  <ScriptProperty>
		<Name>QueryObject</Name>
		<GetScriptBlock>$this.var</GetScriptBlock>
	  </ScriptProperty>
	  <ScriptProperty>
		<Name>Result</Name>
		<GetScriptBlock>$this.val</GetScriptBlock>
	  </ScriptProperty>
    </Members>
  </Type>
  <Type>
    <Name>RES.AutomationManager.Duplicate</Name>
    <Members>
      <MemberSet>
        <Name>PsStandardMembers</Name>
        <Members>
          <NoteProperty>
            <Name>DefaultDisplayProperty</Name>
            <Value>Name</Value>
          </NoteProperty>
          <PropertySet>
            <Name>DefaultDisplayPropertySet</Name>
            <ReferencedProperties>
              <Name>Name</Name>
              <Name>#Duplicates</Name>
            </ReferencedProperties>
          </PropertySet>
          <PropertySet>
            <Name>DefaultKeyPropertySet</Name>
            <ReferencedProperties>
              <Name>Name</Name>
            </ReferencedProperties>
          </PropertySet>
        </Members>
      </MemberSet>
    </Members>
  </Type>
  <Type>
    <Name>RES.AutomationManager.MasterJob</Name>
    <Members>
      <MemberSet>
        <Name>PsStandardMembers</Name>
        <Members>
          <NoteProperty>
            <Name>DefaultDisplayProperty</Name>
            <Value>Description</Value>
          </NoteProperty>
          <PropertySet>
            <Name>DefaultDisplayPropertySet</Name>
            <ReferencedProperties>
              <Name>Description</Name>
			  <Name>Enabled</Name>
			  <Name>Flags</Name>
			  <Name>IsProject</Name>
			  <Name>IsRunBook</Name>
			  <Name>IsRunBookJob</Name>
			  <Name>IsTeam</Name>
			  <Name>JobInvoker</Name>
			  <Name>JobInvokerGUID</Name>
			  <Name>JobInvokerInfo</Name>
			  <Name>LocalTime</Name>
			  <Name>MasterJobGUID</Name>
			  <Name>ModuleGUID</Name>
			  <Name>ModuleName</Name>
			  <Name>Now</Name>
			  <Name>Obsolete</Name>
			  <Name>OrgTasks</Name>
			  <Name>Recurring</Name>
			  <Name>RecurringJobGUID</Name>
			  <Name>RecurringSchedule</Name>
			  <Name>RunBookJobGUID</Name>
			  <Name>ScheduleDateTime</Name>
			  <Name>StartDateTime</Name>
			  <Name>Status</Name>
			  <Name>StopDateTime</Name>
			  <Name>UpdateGUID</Name>
			  <Name>Who</Name>
			  <Name>WhoGUID</Name>
			  <Name>WOL</Name>
            </ReferencedProperties>
          </PropertySet>
          <PropertySet>
            <Name>DefaultKeyPropertySet</Name>
            <ReferencedProperties>
              <Name>Description</Name>
            </ReferencedProperties>
          </PropertySet>
        </Members>
      </MemberSet>
	  <ScriptProperty>
		<Name>Modules</Name>
		<GetScriptBlock>
			If ($this.Tasks)
			{
				$this.Tasks.tasks.task | ?{$_.moduleinfo}
			}
			else
			{
				"Use '-Full' parameter for details"
			}
		</GetScriptBlock>
	  </ScriptProperty>
	  <ScriptProperty>
		<Name>ModuleTasks</Name>
		<GetScriptBlock>
			If ($this.Tasks)
			{
				$this.Tasks.tasks.task | ?{!$_.moduleinfo}
			}
			else
			{
				"Use '-Full' parameter for details"
			}
		</GetScriptBlock>
	  </ScriptProperty>
	  <ScriptMethod>
		<Name>GetFullDetails</Name>
		<Script>Get-RESAMMasterJob -MasterJobGUID $this.MasterJobGUID -Full</Script>
	  </ScriptMethod>
	  <ScriptMethod>
		<Name>GetFailedSummary</Name>
		<Script>
			If ($This.IsProject)
			{
				$Failed = $this | Get-RESAMJob -Status Failed -Full -Last 0
				$FailedTasks = $Failed.Tasks.tasks.task | ?{$_.Status -eq 6}
				foreach ($Task in $FailedTasks)
				{
					$Previous = $Task
					Do
					{
						$Previous = $Previous.PreviousSibling
					}
					Until ($Previous.ModuleInfo)
					[pscustomobject]@{
						AgentName = $Task.AgentName
						FailedModule = $Previous.ModuleInfo.Name
						FailedTask = $Task.Properties.Description
						Type = $Task.Properties.Type
						Result = $Task.result
					}
				}
			}
			ElseIf ($This.IsRunBook)
			{
				
			}
			else
			{
			
			}
		</Script>
	  </ScriptMethod>
	  <ScriptMethod>
		<Name>ToString</Name>
		<Script>$this.Description</Script>
	  </ScriptMethod>
	  <AliasProperty>
		<Name>AgentName</Name>
		<ReferencedMemberName>
			Name
		</ReferencedMemberName>
	  </AliasProperty>
    </Members>
  </Type>
  <Type>
    <Name>RES.AutomationManager.Task</Name>
    <Members>
      <MemberSet>
        <Name>PsStandardMembers</Name>
        <Members>
          <NoteProperty>
            <Name>DefaultDisplayProperty</Name>
            <Value>Description</Value>
          </NoteProperty>
          <PropertySet>
            <Name>DefaultDisplayPropertySet</Name>
            <ReferencedProperties>
              <Name>Description</Name>
              <Name>Type</Name>
			  <Name>Enabled</Name>
			  <Name>OnError</Name>
              <Name>Comments</Name>
			  <Name>Settings</Name>
            </ReferencedProperties>
          </PropertySet>
          <PropertySet>
            <Name>DefaultKeyPropertySet</Name>
            <ReferencedProperties>
              <Name>Description</Name>
            </ReferencedProperties>
          </PropertySet>
        </Members>
      </MemberSet>
	  <ScriptMethod>
		<Name>ToString</Name>
		<Script>$this.Description</Script>
	  </ScriptMethod>
    </Members>
  </Type>
  <Type>
    <Name>RES.AutomationManager.Parameter</Name>
    <Members>
	  <ScriptMethod>
		<Name>ToString</Name>
		<Script>$this.Name</Script>
	  </ScriptMethod>
    </Members>
  </Type>
  <Type>
    <Name>RES.AutomationManager.RunbookJob</Name>
    <Members>
	  <ScriptMethod>
		<Name>ToString</Name>
		<Script>$this.Description</Script>
	  </ScriptMethod>
    </Members>
  </Type>
</Types>
